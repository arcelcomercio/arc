image: circleci/node:12.13-browsers
variables:
  NAMEPROJECT: arc

stages:
  - install
  - build
  - test
  - analize
  - deploy
  - release
  
cache:
  key: '$CI_JOB_NAME-$CI_COMMIT_REF_SLUG'
  paths:
    - .npm
    - cache/Cypress
    #- node_modules

install_dependencies:
  stage: install
  script:
    - npm install
  artifacts:
    when: on_success
    paths:
      - node_modules/
    expire_in: 1 day
  cache:
    key: '$CI_JOB_NAME-$CI_COMMIT_REF_SLUG'
    paths:
      - node_modules/
    policy: push
  only:
    - master
    - sandbox
    - merge_requests
  tags:
    - aws
    - docker

build-verify:
  stage: build
  dependencies:
    - install_dependencies
  script:
    - ls
    - npm run zip || true
    - mkdir artifacts
    - mv components/ config/ content/ environment/ jest/ properties/ resources/  .babelrc .eslintrc  .prettierrc  gulpfile.js  package.json  setupTests.js -t artifacts/
  artifacts:
    when: on_success
    paths:
      - artifacts/
      - node_modules/
    expire_in: 1 day
  after_script:
    - pwd
    - ls artifacts/resources/
  only:
    - sandbox
  tags:
    - aws
    - docker

deploy-sandbox:
  stage: deploy
  dependencies:
    - build-verify
  cache:
    key: '$CI_JOB_NAME-$CI_COMMIT_REF_SLUG'
    paths:
      - node_modules/
    policy: pull
  variables:
    ARC_DOMAIN: $ARC_DOMAIN_SANDBOX
    BUNDLE_NAME: $CI_COMMIT_REF_SLUG
    PB_VERSION: latest
    BUNDLE_FILE: bundle.zip
  script:
    - export BUNDLE_NAME="$CI_JOB_NAME-$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA"
    - export ARC_DOMAIN=$ARC_DOMAIN_SANDBOX
    - export TOKEN_ARC=$TOKEN_SANDBOX
    - export ENV="$CI_JOB_STAGE"
    - cd artifacts/
    - zip -r bundle.zip components/ config/ content/ environment/ jest/ properties/ resources/ .babelrc .eslintrc  .prettierrc  gulpfile.js  package.json  setupTests.js
    - ls -l bundle.zip
    - cp bundle.zip  ../bundle.zip
    - node config/deploy/deploy.js
  only:
    - sandbox
  tags:
    - aws
    - docker

eslint-dev:
  stage: test
  dependencies:
    - install_dependencies
  cache:
    key: '$CI_JOB_NAME-$CI_COMMIT_REF_SLUG'
    paths:
      - node_modules/
    policy: pull
  script:
    # Run eslint
    - npm run lint
  allow_failure: True
  only:
    - merge_requests
  tags:
    - aws
    - docker

coverage-dev:
  stage: test
  dependencies:
    - install_dependencies
  cache:
    paths:
      - node_modules/
  script:
    - ls
    - npm run test:coverage
  allow_failure: True
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
  only:
    - merge_requests
  tags:
    - aws
    - docker

sonar:
  stage: analize
  image: sonarsource/sonar-scanner-cli:4.5
  script:
    - sonar-scanner
  only:
    - merge_requests
  allow_failure: true
  tags:
    - aws
    - docker

build-verify_master:
  stage: build
  dependencies:
    - install_dependencies
  script:
    - ls
    - npm run zip || true
    - mkdir artifacts
    - mv components/ config/ content/ environment/ jest/ properties/ resources/  .babelrc .eslintrc  .prettierrc  gulpfile.js  package.json  setupTests.js -t artifacts/
  artifacts:
    when: on_success
    paths:
      - artifacts/
      - node_modules/
    expire_in: 1 day
  after_script:
    - echo "hola"
    - pwd
    - ls resources/
  only:
    - master
  tags:
    - aws
    - docker

deploy-master:
  stage: deploy
  dependencies:
    - build-verify_master
  cache:
    key: '$CI_JOB_NAME-$CI_COMMIT_REF_SLUG'
    paths:
      - node_modules/
    policy: pull
  variables:
    ARC_DOMAIN: $ARC_DOMAIN_SANDBOX
    BUNDLE_NAME: $CI_COMMIT_REF_SLUG
    PB_VERSION: latest
    BUNDLE_FILE: bundle.zip
  script:
    - pwd
    - export BUNDLE_NAME="$CI_JOB_NAME-$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA"
    - export ARC_DOMAIN=$ARC_DOMAIN_MASTER
    - export ENV="$CI_JOB_STAGE"
    - export TOKEN_ARC=$TOKEN_MASTER
    - cd artifacts/
    - ls
    - zip -r bundle.zip components/ config/ content/ environment/ jest/ properties/ resources/ .babelrc .eslintrc  .prettierrc  gulpfile.js  package.json  setupTests.js
    - ls -l bundle.zip
    - cp bundle.zip  ../bundle.zip
    - node config/deploy/deploy.js
  only:
    - master
  tags:
    - aws
    - docker

lighthouse:
    image: markhobson/node-chrome
    variables:
        LIGHTHOUSE_TEST_URL_EC: https://elcomercio.pe
        LIGHTHOUSE_TEST_URL_GESTION: https://gestion.pe
    stage: deploy
    environment: Production    
    before_script: 
        # Install Lighthouse
        - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
        - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
        - export AWS_DEFAULT_REGION=AWS_DEFAULT_REGION
        - apt-get update && apt-get install -y python-pip
        - pip install awscli --ignore-installed six
        - aws --version
        - npm i -g lighthouse
    script:
        # Run Lighthouse test
        - lighthouse --chrome-flags="--headless --no-sandbox" $LIGHTHOUSE_TEST_URL_EC --output html --output-path ./elcomercio_report.html
        - lighthouse --chrome-flags="--headless --no-sandbox" $LIGHTHOUSE_TEST_URL_GESTION --output html --output-path ./gestion_report.html
    only:        
        - master
    after_script:
    - aws s3 cp ./elcomercio_report.html  s3://lighthouse-ec/elcomercio/index.html  --metadata-directive REPLACE  --cache-control max-age=3000 --content-type text/html
    - aws s3 cp ./gestion_report.html  s3://lighthouse-ec/gestion/index.html --metadata-directive REPLACE  --cache-control max-age=3000 --content-type text/html
    - pwd
    tags:
    - aws
    - docker

publish:
  image: registry.gitlab.ec.pe/contenidos/arc
  stage: release
  when: manual
  dependencies:
    - deploy-master
  before_script:
    #- apt-get update
    - apt-get install python-dev python-pip -y
    - apt-get install git -y
    - npm install
    - yarn install --frozen-lockfile
  script:
    - yarn add --dev @hutson/semantic-delivery-gitlab
    - yarn add --dev conventional-changelog-eslint
    - ./node_modules/.bin/semantic-delivery-gitlab  --token xfctBNu4ACq4AD8AGBCg  --preset eslint
  only:
    - master
  tags:
    - aws
    - docker
